#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_36keys.h"

#define BASE 0
#define MEDIA 1
#define SYMBOLS 2
#define NUMBERS 3
#define NAV 4
#define FUNCTION 5
#define BLUETOOTH 6
#define MOUSE 7
#define CLICK 8
#define SCRL 9
#define BIRO 10

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

// tapping-term-ms
#define TT 160

#define MAKE_HRM(NAME, HOLD, TAP, FLAVOR, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = FLAVOR; \
        tapping-term-ms = <TT>; \
        quick-tap-ms = <0>; \
        // require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        // hold-trigger-on-release; \
    )

MAKE_HRM(bltl, &mo, &kp, "balanced", KEYS_R THUMBS) // left-hand layer-tap
MAKE_HRM(bltr, &mo, &kp, "balanced", KEYS_L THUMBS) // right-hand layer-tap
MAKE_HRM(hml, &kp, &kp, "balanced", KEYS_R THUMBS) // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, "balanced", KEYS_L THUMBS) // right-hand HRMs
MAKE_HRM(hmlt, &kp, &kp, "tap-preferred", KEYS_R THUMBS) // left-hand HRMs
MAKE_HRM(hmrt, &kp, &kp, "tap-preferred", KEYS_L THUMBS) // right-hand HRMs

/ {
  chosen {
    zmk,matrix_transform = &five_column_transform;
  };
};

/ {
    behaviors {
        tt: toggle_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TOGGLE_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&tog>;
        };
        repeat_encoder: repeat_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "REPEAT_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&kp BSPC>, <&key_repeat>;
        };
        tsl: behavior_trackball_scroll {
			compatible = "zmk,behavior-point-device-incremental";
			label = "TRACKBALL_SCROLL";
			#trackball-binding-cells = <0>;
            mode = "scroll-mode";
            flavor = "default";
            scale_mode = "dividor";
            scale_factor = <4>;
            smoothing;
		};
        tkp_fast: behavior_trackball_key_press {
            compatible = "zmk,behavior-point-device-directional";
            label = "TRACKBALL_KEY_PRESS";
            #trackball-binding-cells = <4>;
            mode = "distance-mode";
            flavor = "2-dim";
            step_size = <50>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        nav_ball_scroll {
            if-layers = <MOUSE NAV>;
            then-layer = <BIRO>;
        };
        num_ball_scroll {
            if-layers = <MOUSE SYMBOLS>;
            then-layer = <SCRL>;
        };
    };

   macros {
        vi_editing_mode: vi_editing_mode {
            label = "vi editing-mode";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp S &kp E &kp T &kp SPACE &kp MINUS &kp O &kp SPACE &kp V &kp I &kp RET>;
        };
    };

  ZMK_COMBO(lpar, &kp LPAR, LM1 LM2, BASE)
  ZMK_COMBO(rpar, &kp RPAR, LM2 LM3, BASE)

  keymap {
    compatible = "zmk,keymap";

        default {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  '    |  ,  |  .  |  P/Nav  |  Y  |                             |  F/Fn  |  G  |  C/Caps  |    R    |  L   |
// A/Sym |  O/Ctrl  |  E/Alt [A->F13]? |  U/Cmd  |  I  |           |  D  |  H/Cmd  |  T/Alt  |    N/Ctrl    |  S/Sym |
// Esc/Lsft|  Q/Click  |  J  |  K  |  X  |                               |  B  |  M  |  W  |    V    |Z/Rsft|
// | Media/Play-Pause | Bspc/LC | SPC/Num/RC |                                                       | Ent | Tab |     |
           bindings = <
            &lt BLUETOOTH APOS &kp COMMA &kp DOT &bltl NAV P &kp Y &lt FUNCTION F &kp G &ht CAPS C &kp R  &kp L
            &bltl SYMBOLS A &hml LCTRL O &hmlt LALT E &hml LCMD U &kp I &kp D &hmr RCMD H &hmrt LALT T &hmr RCTRL N &bltr SYMBOLS S
            &hml LSHFT ESC &bltl CLICK Q &kp J &kp K &kp X &kp B &kp M &kp W &kp V &hmr RSHFT Z
            &tt C_PP MEDIA &kp BSPC &bltl NUMBERS SPACE &kp RET &kp TAB
            >;
            sensor-bindings = <&inc_dec_kp BSPC BSPC>;
        };

        medi_jah {
            bindings = <
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
                           &tt C_PP MEDIA &trans &trans    &trans  &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        symbols {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  !  |  @  |  {  |  }  |     |                |         |    <    |    >   |  *  |   #  |
//  ^  |  $  |  (  |  )  |  \  |                |    &    |    =    |    -   |  :  |   ;  |
//  ~  |  `  |  [  |  ]  |     |                |         |    +    |    _   |  %  |   ?  |
//         |  ,,  | |/&  | //\ |                |    "    |    `    |   ,,   |
           bindings = <
            &kp EXCL &hml LS(LCTRL) AT &hmlt LS(LALT) LBRC &hml LS(LCMD) RBRC &none &none &hmr RS(RCMD) LT &hmrt RS(LALT) GT &hmr RS(RCTRL) ASTERISK &hmr LA(N3) HASH
            &kp CARET &hml LCTRL DOLLAR &hmlt LALT LPAR &hml LCMD RPAR &kp BACKSLASH &kp AMPS &hmr RCMD EQL &hmrt LALT MINUS &hmr RCTRL COLON &kp SEMICOLON
            &kp TILDE &kp GRAVE &kp LBKT &kp RBKT &none &none &kp PLUS &kp UNDERSCORE &kp PERCENT &kp QMARK
            &trans &mt AMPS PIPE &mt BACKSLASH SLASH &kp DQT &kp GRAVE
           >;
            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            trackball-bindings = <&tmv_fine>;
        };

        numbers {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
//   s-f5  |  s-f6  |  s-f7 |  s-f8  |   |            |         |    4/<    |    5/>   |  6/*  |   7//  |
//    s-f1   |  s-f2 |  s-f3 | s-f4 | vi |            |   DEL   |    0/=    |    1/-   | 2/: |   3/;  |
//     s-f9   | s-f10 | s-f11 | s-f12 |   |           |         |    8/+    |    9/_   | +/- | *//  |
//         |      |     |      |     |      |    .    |    =    |      |
           bindings = <
	    &kp LS(F5) &kp LS(F6) &kp LS(F7) &kp LS(F8) &none &none &hmrt LT N4 &hmrt GT N5 &hmrt ASTERISK N6 &hmrt SLASH N7
	    &kp LS(F1) &kp LS(F2) &kp LS(F3) &kp LS(F4) &vi_editing_mode &kp DEL &hmrt EQL N0 &hmrt MINUS N1 &hmrt COLON N2 &hmrt SEMICOLON N3
	    &kp LS(F9) &kp LS(F10) &kp LS(F11) &kp LS(F12) &none &none &hmrt PLUS N8 &hmrt UNDERSCORE N9 &hmrt MINUS PLUS &hmrt SLASH ASTERISK
	    &none &none &none &kp DOT &kp EQL
            >;
            trackball-bindings = <&tsl>;
        };

        nav {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
//     |     |     |     |     |                |         |         |    ^   |     |      |
//     |     |     |     |     |                |         |    <    |    v   |  >  |      |
//     |     |     |     |     |                |         |   HOME  |        | END |      |
//         |      |     |      |     |      |    PgDN   |   PgUP  |      |
           bindings = <
	    &none &none &none &none &none &none &none &kp UP &none &none
	    &none &none &none &none &none &none &kp LEFT &kp DOWN &kp RIGHT &none
	    &none &none &none &none &none &none &kp HOME &none &kp END &none
	    &none &none &none &kp PG_DN &kp PG_UP
            >;
        };

        fn {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
//  F5 |  F6 | F7  | F8  |     |                |         |         |        |     |      |
//  F1 |  F2 | F3  | F4  | DEL |                |         |         |        |     |      |
//  F9 | F10 | F11 | F12 |     |                |   ,,    |   ,,    |        |     |      |
//         |      |     |      |     |      |           |         |      |
           bindings = <
            &kp F5 &kp F6 &kp F7 &kp F8 &none &none &none &none &none &none
            &kp F1 &kp F2 &kp F3 &kp F4 &kp DEL &none &none &none &none &none
            &kp F9 &kp F10 &kp F11 &kp F12 &none &none &none &none &none &none
	    &none &none &none &none &none
            >;
            sensor-bindings = <&inc_dec_kp C_BRI_DEC C_BRI_INC>;
        };

        bt {
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------
//     |     |     |     |     |                |         |         |        |     |      |
//     |     |     |     |     |                |   P0    |    P1   |   P2   |  P3 |  P4  |
//     |     |     |     |     |                | BT/USB  |         |        |     |      |
//         | CLR  |     |      |
           bindings = <
            &none &none &none &none &none &none &none &none &none &none
            &none &none &none &none &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
            &none &none &none &none &none &out OUT_TOG &none &none &none &none
	        &none &bt BT_CLR &none &none &none
            >;
        };

        mouse {
            bindings = <
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
                           &trans  &trans &trans    &trans  &trans
            >;
            trackball-bindings = <&tmv>;
        };

        click {
            bindings = <
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &kp LSHFT  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &kp LCTRL  &trans  &kp LALT  &kp LCMD    &trans    &trans  &trans  &trans  &trans  &trans
                           &trans  &mkp RCLK &mkp LCLK    &trans  &trans
            >;
            trackball-bindings = <&tmv_fine>;
        };

        scrolly_moly {
            bindings = <
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
                           &trans  &trans &trans        &trans  &trans
            >;
            trackball-bindings = <&tsl>;
        };

        // ball point
        biro {
            bindings = <
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
    &trans  &trans     &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans
                           &trans  &trans &trans    &trans  &trans
            >;
            trackball-bindings = <&tkp_fast LEFT RIGHT UP DOWN>;
        };

    };
};
